import 'package:genie_mvp/data_models/backend_api/backend_metadata.dart';
import 'package:genie_mvp/data_models/backend_api/mini_app_run.dart';
import 'package:genie_mvp/data_models/backend_api/mini_app_search.dart';
import 'package:genie_mvp/data_models/backend_api/mini_app_generation.dart';
import 'package:genie_mvp/data_models/backend_api/file_operations.dart';
import 'package:genie_mvp/data_models/backend_api/login.dart';
import 'package:genie_mvp/data_models/data_types/single_value_provider.dart';

/// Wraps the backend API calls.
abstract class BackendBase {
  /// Retrieves a page of items for a search session.
  Future<MiniAppSearchPageResponse> searchPage(
      String token, MiniAppSearchPageRequest request);

  /// Retrieves the metadata of the backend endpoint.
  Future<BackendMetadata> getBackendMetadata(String token);

  /// Retrieves the compute balance of the user.
  Future<double> getComputeBalance(String token);

  /// Runs a mini app, returning the output data.
  Future<MiniAppRunResponse> runMiniApp(
      String token, MiniAppRunRequest request);

  /// Generates an AI mini app.
  Future<MiniAppGenerationResponse> generateMiniApp(
      String token, MiniAppGenerationRequest request);

  /// Uploads a file from the given path, returning the file ID generated by the server.
  Future<FileUploadResponse> uploadFile(
      String token, FileUploadRequest request);

  /// Downloads a file from its file ID, returning the path to the saved downloaded file.
  Future<FileDownloadResponse> downloadFile(
      String token, FileDownloadRequest request);

  /// Validates an accessToken against the remote server,
  /// returning the username on success.
  Future<String> validateToken(String accessToken);

  /// Sends the login credentials to the remote server,
  /// returning a new access token on success.
  Future<String> login(LoginCredentials loginCredentials);
}
