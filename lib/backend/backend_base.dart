import 'package:genie_mvp/data_models/backend_api/backend_metadata.dart';
import 'package:genie_mvp/data_models/backend_api/mini_app_run.dart';
import 'package:genie_mvp/data_models/backend_api/mini_app_search.dart';
import 'package:genie_mvp/data_models/backend_api/mini_app_generation.dart';
import 'package:genie_mvp/data_models/backend_api/file_operations.dart';
import 'package:genie_mvp/data_models/backend_api/login.dart';

abstract class BackendBase {
  /// Retrieves a page of items for a search session.
  Future<MiniAppSearchPageResponse> searchPage(
      MiniAppSearchPageRequest request);

  Future<BackendMetadata> getBackendMetadata();

  Future<double> getComputeBalance();

  /// Runs a mini app, returning the output data.
  Future<MiniAppRunResponse> runMiniApp(MiniAppRunRequest request);

  /// Generates an AI mini app.
  Future<MiniAppGenerationResponse> generateMiniApp(
      MiniAppGenerationRequest request);

  /// Uploads a file from the given path, returning the file ID generated by the server.
  Future<FileUploadResponse> uploadFile(FileUploadRequest request);

  /// Downloads a file from its file ID, returning the path to the saved downloaded file.
  Future<FileDownloadResponse> downloadFile(FileDownloadRequest request);

  /// Tries to read the token from local storage
  /// and validate the token.
  ///
  /// Returns error if token does not exist
  /// or is not valid.
  Future<void> setUpToken();

  /// Retrieves a new token and updates the stored token.
  Future<void> login(LoginCredentials loginCredentials);
}
